// Generated by https://quicktype.io

export interface Definitions {
  itemDefinitions: ItemDefinition[];
  facilitiesDefinitions: FacilitiesDefinition[];
  buildingDefinitions: BuildingDefinition[];
}

export interface BuildingDefinition {
  buildable: Buildable;
  name: string;
  level: number;
  upgrade?: BuildingDefinition;
  craftingFacilities?: FacilitiesDefinition[];
}

export interface Buildable {
  sourceItems: ItemDefinition[];
}
export interface Building extends BuildingDefinition {
  x: number;
  y: number;
  owner: Player;
  id: string;
  level: number;
}

export interface ItemDefinition {
  requiredAmount?: number;
  maxStackSize: number;
  name: string;
  craftable?: Craftable;
  equipable?: Equipable;
}

export interface Craftable {
  result: string;
  sourceItems: SourceItem[];
  facility: string[];
}

export interface SourceItem {
  name: string;
  requiredAmount: number;
}

export interface Equipable {
  type: string;
}

export interface FacilitiesDefinition {
  name: string;
}
// Generated by https://quicktype.io

export interface Terrain {
  x: number;
  y: number;
  width: number;
  height: number;
  chunkSize: number;
  mapId: string;
  chunkNumber: number;
}
export interface Player {
  x: number;
  y: number;
  playerChunk: any;
  active: boolean;
  id: string;
  inventory: Inventory;
  name: string;
}

export interface Block extends Quad {
  biome: BIOMES;
  moisture: MOISTURE;
  materials: any;
  animals: ANIMALS;
  id: number;
}
export interface Chunk extends Quad {
  id: number;
  blocks: Block[];
}
export interface Quad {
  x: number;
  y: number;
  width: number;
  height: number;
}
export interface Inventory {
  equiped: Equiped;
  items: Item[];
  inventorySize: number;
  uid: number;
}

export interface Item extends ItemDefinition {
  stackSize: number;
  index: number;
}

export interface EquipableItem {
  type: EquipmentType;
}
export interface Equiped {
  [index: string]: Item;
  chest: Item;
  legs: Item;
  pauldrons: Item;
  head: Item;
  gauntlets: Item;
  cape: Item;
  shirt: Item;
  boots: Item;
  mainhand: Item;
  offhand: Item;
  trinket: Item;
  ring: Item;
}
export interface CraftableItem {
  result: string;
  sourceItems: SourceItemDefinition[];
  facility: CraftingFacility[];
}
export interface CraftingFacility {
  name: string;
}
export interface SourceItemDefinition extends ItemDefinition {
  requiredAmount: number;
}
export enum ANIMALS {
  FISH = "FISH",
  DEER = "DEER",
  NONE = "NONE",
}
export enum BIOMES {
  MOUNTAIN = "MOUNTAIN",
  HILLS = "HILLS",
  PLAIN = "PLAIN",
  BEACH = "BEACH",
  SHALLOW_WATER = "SHALLOW_WATER",
  DEEP_WATER = "DEEP_WATER",
}
export enum MATERIALS {
  GOLD = "GOLD",
  COPPER = "COPPER",
  IRON = "IRON",
  TIN = "TIN",
  COAL = "COAL",
  OIL = "OIL",
  SALT = "SALT",
  NONE = "NONE",
}
export enum MOISTURE {
  DESERT = "DESERT",
  FIELD = "FIELD",
  FOREST = "FOREST",
  NONE = "NONE",
}
export enum EquipmentType {
  CHEST = "CHEST",
  LEGS = "LEGS",
  PAULDRONS = "PAULDRONS",
  HEAD = "HEAD",
  GAUNTLETS = "GAUNTLETS",
  CAPE = "CAPE",
  SHIRT = "SHIRT",
  BOOTS = "BOOTS",
  MAINHAND = "MAINHAND",
  OFFHAND = "OFFHAND",
  TRINKET = "TRINKET",
  RING = "RING",
}

export type Directions =
  | "up-left"
  | "up"
  | "up-right"
  | "left"
  | "right"
  | "down-left"
  | "down"
  | "down-right";

type State =
  | "moving"
  | "building"
  | "crafting"
  | "building:chosen"
  | "waiting"
  | "idle";
export type PlayerState = {
  state: State;
  detail: any;
};

export interface Timer {
  id: string;
  startTime: number;
  cycleAmount: number;
  currentCycle: number;
  hasEnded: boolean;
  cancelled: boolean;
}
